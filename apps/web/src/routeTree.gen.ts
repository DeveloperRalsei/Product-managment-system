/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as UsersIndexImport } from './routes/users/index'
import { Route as ProductsIndexImport } from './routes/products/index'
import { Route as LoginIndexImport } from './routes/login/index'
import { Route as UsersNewImport } from './routes/users/new'
import { Route as ProductsNewImport } from './routes/products/new'
import { Route as LoginVerifyImport } from './routes/login/verify'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const UsersIndexRoute = UsersIndexImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => rootRoute,
} as any)

const ProductsIndexRoute = ProductsIndexImport.update({
  id: '/products/',
  path: '/products/',
  getParentRoute: () => rootRoute,
} as any)

const LoginIndexRoute = LoginIndexImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => rootRoute,
} as any)

const UsersNewRoute = UsersNewImport.update({
  id: '/users/new',
  path: '/users/new',
  getParentRoute: () => rootRoute,
} as any)

const ProductsNewRoute = ProductsNewImport.update({
  id: '/products/new',
  path: '/products/new',
  getParentRoute: () => rootRoute,
} as any)

const LoginVerifyRoute = LoginVerifyImport.update({
  id: '/login/verify',
  path: '/login/verify',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/login/verify': {
      id: '/login/verify'
      path: '/login/verify'
      fullPath: '/login/verify'
      preLoaderRoute: typeof LoginVerifyImport
      parentRoute: typeof rootRoute
    }
    '/products/new': {
      id: '/products/new'
      path: '/products/new'
      fullPath: '/products/new'
      preLoaderRoute: typeof ProductsNewImport
      parentRoute: typeof rootRoute
    }
    '/users/new': {
      id: '/users/new'
      path: '/users/new'
      fullPath: '/users/new'
      preLoaderRoute: typeof UsersNewImport
      parentRoute: typeof rootRoute
    }
    '/login/': {
      id: '/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginIndexImport
      parentRoute: typeof rootRoute
    }
    '/products/': {
      id: '/products/'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof ProductsIndexImport
      parentRoute: typeof rootRoute
    }
    '/users/': {
      id: '/users/'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login/verify': typeof LoginVerifyRoute
  '/products/new': typeof ProductsNewRoute
  '/users/new': typeof UsersNewRoute
  '/login': typeof LoginIndexRoute
  '/products': typeof ProductsIndexRoute
  '/users': typeof UsersIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login/verify': typeof LoginVerifyRoute
  '/products/new': typeof ProductsNewRoute
  '/users/new': typeof UsersNewRoute
  '/login': typeof LoginIndexRoute
  '/products': typeof ProductsIndexRoute
  '/users': typeof UsersIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/login/verify': typeof LoginVerifyRoute
  '/products/new': typeof ProductsNewRoute
  '/users/new': typeof UsersNewRoute
  '/login/': typeof LoginIndexRoute
  '/products/': typeof ProductsIndexRoute
  '/users/': typeof UsersIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login/verify'
    | '/products/new'
    | '/users/new'
    | '/login'
    | '/products'
    | '/users'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login/verify'
    | '/products/new'
    | '/users/new'
    | '/login'
    | '/products'
    | '/users'
  id:
    | '__root__'
    | '/'
    | '/login/verify'
    | '/products/new'
    | '/users/new'
    | '/login/'
    | '/products/'
    | '/users/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoginVerifyRoute: typeof LoginVerifyRoute
  ProductsNewRoute: typeof ProductsNewRoute
  UsersNewRoute: typeof UsersNewRoute
  LoginIndexRoute: typeof LoginIndexRoute
  ProductsIndexRoute: typeof ProductsIndexRoute
  UsersIndexRoute: typeof UsersIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginVerifyRoute: LoginVerifyRoute,
  ProductsNewRoute: ProductsNewRoute,
  UsersNewRoute: UsersNewRoute,
  LoginIndexRoute: LoginIndexRoute,
  ProductsIndexRoute: ProductsIndexRoute,
  UsersIndexRoute: UsersIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/login/verify",
        "/products/new",
        "/users/new",
        "/login/",
        "/products/",
        "/users/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/login/verify": {
      "filePath": "login/verify.tsx"
    },
    "/products/new": {
      "filePath": "products/new.tsx"
    },
    "/users/new": {
      "filePath": "users/new.tsx"
    },
    "/login/": {
      "filePath": "login/index.tsx"
    },
    "/products/": {
      "filePath": "products/index.tsx"
    },
    "/users/": {
      "filePath": "users/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
